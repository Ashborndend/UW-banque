import sqlite3
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler
from datetime import datetime
from telegram.helpers import escape_markdown

# Connexion √† la base SQLite
conn = sqlite3.connect("database.db", check_same_thread=False)
cursor = conn.cursor()

# Cr√©ation de la table utilisateurs si elle n'existe pas
cursor.execute("""
CREATE TABLE IF NOT EXISTS utilisateurs (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    prestige INTEGER DEFAULT 0,
    flocons INTEGER DEFAULT 0,
    apparition TEXT
)
""")
conn.commit()

# Ajouter l'utilisateur sp√©cial @ROI0END si absent
def init_roi():
    cursor.execute("SELECT * FROM utilisateurs WHERE user_id = ?", (5330541181,))
    if not cursor.fetchone():
        cursor.execute("""
            INSERT INTO utilisateurs (user_id, username, prestige, flocons, apparition)
            VALUES (?, ?, ?, ?, ?)
        """, (5330541181, "ROI0END", 999999, 99999, "01/01/2025"))
        conn.commit()
init_roi()

def obtenir_grade(prestige):
    if prestige < 10: return "Recrue", 10
    elif prestige < 50: return "Soldat", 50
    elif prestige < 150: return "Soldat de 1√®re classe", 150
    elif prestige < 500: return "Sergent", 500
    elif prestige < 1000: return "Lieutenant", 1000
    elif prestige < 2000: return "Major", 2000
    elif prestige < 5000: return "Amiral", 5000
    elif prestige < 10000: return "Centurion", 10000
    elif prestige < 20000: return "Souverain", 20000
    else: return "Empereur", 100000

def obtenir_rang(flocons):
    if flocons < 100: return "Dormeur", 100
    elif flocons < 500: return "√âveill√©", 500
    elif flocons < 1000: return "Ascendant", 1000
    elif flocons < 2000: return "Transcendant", 2000
    elif flocons < 10000: return "Sacr√©", 10000
    else: return "Divin", 20000

def get_user(user):
    cursor.execute("SELECT * FROM utilisateurs WHERE user_id = ?", (user.id,))
    result = cursor.fetchone()
    if not result:
        apparition = datetime.now().strftime("%d/%m/%Y")
        cursor.execute("INSERT INTO utilisateurs (user_id, username, apparition) VALUES (?, ?, ?)",
                       (user.id, user.username or user.first_name, apparition))
        conn.commit()
        return (user.id, user.username or user.first_name, 0, 0, apparition)
    return result

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        bouton1 = [
        [InlineKeyboardButton("ICI", url="https://t.me/Soldierendbot")]
    ]
        await update.message.reply_text("‚õî Cette commande ne peut √™tre utilis√©e que dans le bot", reply_markup=InlineKeyboardMarkup(bouton1))
        return
    get_user(update.effective_user)
    message = """*Bienvenue*, tu viens de franchir la premi√®re porte de l‚ÄôEmpire *Urban Wolf*.

üìú *Commandes disponibles :*
\n/start ‚Äì D√©marre le bot
\n/statut ‚Äì Ton rang
\n/flocon ‚Äì Infos sur la monnaie ‚ùÑÔ∏è
\n/prestige ‚Äì Infos sur les points ‚ú®
\n/classement ‚Äì Voir les meilleurs
\n/link ‚Äì Lien de l'empire
\n/give ‚Äì Donner des flocons ‚ùÑÔ∏è
"""
    await update.message.reply_photo(photo="https://imgur.com/a/xug47FR", caption=message, parse_mode="Markdown")

async def statut(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = get_user(update.effective_user)
    grade, prochain_prestige = obtenir_grade(user_data[2])
    rang, prochain_flocon = obtenir_rang(user_data[3])
    message = f"""[ìÜ© @{user_data[1]} ìÜ™]

üéñÔ∏è Grade : {grade}
‚ú® Prestige : {user_data[2]} ‚ú® / {prochain_prestige}
Ô∏èÔ∏èüèÖ Rang : {rang}
‚ùÑÔ∏è Flocons : {user_data[3]} ‚ùÑÔ∏è / {prochain_flocon}
Ô∏èüìÜ Apparu le : {user_data[4]}"""
    await update.message.reply_photo(photo="https://imgur.com/a/m2USWEy", caption=message, parse_mode="Markdown")

async def prestige(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ú® Prestige ‚Äî Honneur et Loyaut√© Attribu√© par l‚ÄôEmpereur ou ses G√©n√©raux. C‚Äôest la marque de ton d√©vouement absolu √† l‚ÄôEmpire.\n\nüéñÔ∏è Grades (Prestige) :\n\n‚ú™ Recrue : 0 ‚Äì 10\n\n‚ú™ Soldat : 10 ‚Äì 50\n\n‚ú™ 1√®re Classe : 50 ‚Äì 150\n\n‚ú™ Sergent : 150 ‚Äì 500\n\n‚ú™ Lieutenant : 500 ‚Äì 1‚ÄØ000\n\n‚ú™ Major : 1‚ÄØ000 ‚Äì 2‚ÄØ000\n\n‚ú™ Amiral : 2‚ÄØ000 ‚Äì 5‚ÄØ000\n\n‚ú™ Centurion : 5‚ÄØ000 ‚Äì 10‚ÄØ000\n\n‚ú™ Souverain : 10‚ÄØ000 ‚Äì 20‚ÄØ000\n\n‚ú™ Empereur : 100‚ÄØ000+ (r√©serv√©)\n\nüî• Comment gagner du ‚ú® Prestige ?\n‚Ä¢ Accomplir une mission secr√®te\n‚Ä¢ Remporter un √©v√©nement majeur\n‚Ä¢ √ätre rep√©r√© par un sup√©rieur\n‚Ä¢ Accomplir un acte remarquable", parse_mode="Markdown")

async def flocon(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùÑÔ∏è Flocons ‚Äî Monnaie du Pouvoir Utilise-les pour d√©bloquer des privil√®ges, gravir les √©chelons ou obtenir des r√©compenses exclusive.\n\nüèÜ Rangs (Flocons) :\n\n‚ú™ Dormeur : 0 ‚Äì 100\n\n‚ú™ √âveill√© : 100 ‚Äì 500\n\n‚ú™ Ascendant : 500 ‚Äì 1‚ÄØ000\n\n‚ú™ Transcendant : 1‚ÄØ000 ‚Äì 2‚ÄØ000\n\n‚ú™ Sacr√© : 2‚ÄØ000 ‚Äì 10‚ÄØ000\n\n‚ú™ Divin : 10‚ÄØ000+\n\n‚öôÔ∏è Comment gagner des ‚ùÑÔ∏è Flocons ?\n‚Ä¢ Gagner un duel contre un admin (√©v√©nement valid√©)\n‚Ä¢ Cr√©er ou organiser un √©v√©nement\n‚Ä¢ Remporter un √©v√©nement officiel\n‚Ä¢ R√©aliser un exploit ou aider activement l‚ÄôEmpire", parse_mode="Markdown")

async def link(update: Update, context: ContextTypes.DEFAULT_TYPE):
        bouton1 = [
        [InlineKeyboardButton("Rejoins l'Empire", url="https://t.me/MILITARY_URBANWOLF")]
    ]
        await update.message.reply_text("Voici le lien", reply_markup=InlineKeyboardMarkup(bouton1))

async def classement(update: Update, context: ContextTypes.DEFAULT_TYPE):
    boutons = [[InlineKeyboardButton("Flocons ‚ùÑÔ∏è", callback_data="classement_flocon")],
               [InlineKeyboardButton("Prestige ‚ú®", callback_data="classement_prestige")]]
    await update.message.reply_text("Choisis :", reply_markup=InlineKeyboardMarkup(boutons))

async def bouton_classement(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "classement_flocon":
        cursor.execute("SELECT username, flocons FROM utilisateurs ORDER BY flocons DESC")
        tri = cursor.fetchall()
        titre = "üèÜ *Classement Flocons ‚ùÑÔ∏è*\n\n"
        lignes = []
        for i, user in enumerate(tri):
            pseudo = escape_markdown(user[0] or "Inconnu", version=2)
            lignes.append(f"{i+1}\. @{pseudo} ‚Äì {user[1]} ‚ùÑÔ∏è")
    else:
        cursor.execute("SELECT username, prestige FROM utilisateurs ORDER BY prestige DESC")
        tri = cursor.fetchall()
        titre = "üèÖ *Classement Prestige ‚ú®*\n\n"
        lignes = []
        for i, user in enumerate(tri):
            pseudo = escape_markdown(user[0] or "Inconnu", version=2)
            lignes.append(f"{i+1}\. @{pseudo} ‚Äì {user[1]} ‚ú®")

    texte_final = escape_markdown(titre, version=2) + "\n".join(lignes)
    await query.edit_message_text(text=texte_final, parse_mode="MarkdownV2")
    
async def holy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.username != "ROI0END":
        await update.message.reply_text("‚õî Seul l'Empereur peut utiliser cette commande.")
        return
    if len(context.args) < 2 and not update.message.reply_to_message:
        await update.message.reply_text("Utilisation : /holy [flocons|prestige] [valeur] en r√©pondant √† un message.")
        return
    type_point = context.args[0].lower()
    valeur = int(context.args[1])
    cible = update.message.reply_to_message.from_user
    get_user(cible)
    cursor.execute(f"UPDATE utilisateurs SET {type_point} = {type_point} + ? WHERE user_id = ?", (valeur, cible.id))
    conn.commit()
    await update.message.reply_text(f"‚úÖ Ajout de {valeur} {'‚ùÑÔ∏è' if type_point == 'flocons' else '‚ú®'} √† @{cible.username}")

async def unholy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.username != "ROI0END":
        await update.message.reply_text("‚õî Seul l'Empereur peut utiliser cette commande.")
        return
    if len(context.args) < 2 and not update.message.reply_to_message:
        await update.message.reply_text("Utilisation : /unholy [flocons|prestige] [valeur] en r√©pondant √† un message.")
        return
    type_point = context.args[0].lower()
    valeur = int(context.args[1])
    cible = update.message.reply_to_message.from_user
    get_user(cible)
    cursor.execute(f"UPDATE utilisateurs SET {type_point} = MAX({type_point} - ?, 0) WHERE user_id = ?", (valeur, cible.id))
    conn.commit()
    await update.message.reply_text(f"‚ò†Ô∏è Retrait de {valeur} {'‚ùÑÔ∏è' if type_point == 'flocons' else '‚ú®'} √† @{cible.username}")

async def give(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2 or not update.message.reply_to_message:
        await update.message.reply_text("Utilisation : /give flocons [valeur] en r√©pondant √† un utilisateur.")
        return
    valeur = int(context.args[1])
    donneur = update.effective_user
    receveur = update.message.reply_to_message.from_user
    get_user(donneur)
    get_user(receveur)
    cursor.execute("SELECT flocons FROM utilisateurs WHERE user_id = ?", (donneur.id,))
    dispo = cursor.fetchone()[0]
    if dispo < valeur:
        await update.message.reply_text("‚ùå Tu n'as pas assez de flocons.")
        return
    cursor.execute("UPDATE utilisateurs SET flocons = flocons - ? WHERE user_id = ?", (valeur, donneur.id))
    cursor.execute("UPDATE utilisateurs SET flocons = flocons + ? WHERE user_id = ?", (valeur, receveur.id))
    conn.commit()
    await update.message.reply_text(f"‚úÖ {valeur} ‚ùÑÔ∏è envoy√© √† @{receveur.username}")

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != 5330541181:
        await update.message.reply_text("‚õî Seul l'Empereur peut r√©initialiser un utilisateur.")
        return

    cible = update.message.reply_to_message.from_user if update.message.reply_to_message else None
    if not cible:
        await update.message.reply_text("R√©ponds au message de l'utilisateur.")
        return

    cursor.execute("UPDATE utilisateurs SET prestige = 0, flocons = 0 WHERE user_id = ?", (cible.id,))
    conn.commit()
    await update.message.reply_text(f"üîÑ Donn√©es de @{cible.username} r√©initialis√©es.")


if __name__ == "__main__":
    app = ApplicationBuilder().token("7108384227:AAEBSsb36oH2Cdkg9-J0S7oJbGrhdsNweY8").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("statut", statut))
    app.add_handler(CommandHandler("prestige", prestige))
    app.add_handler(CommandHandler("flocon", flocon))
    app.add_handler(CommandHandler("link", link))
    app.add_handler(CommandHandler("classement", classement))
    app.add_handler(CommandHandler("holy", holy))
    app.add_handler(CommandHandler("unholy", unholy))
    app.add_handler(CommandHandler("give", give))
    app.add_handler(CallbackQueryHandler(bouton_classement))
    app.add_handler(CommandHandler("kill", reset))

    print("Bot en ligne...")
    app.run_polling()
